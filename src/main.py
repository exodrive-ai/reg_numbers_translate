import streamlit as st
import pandas as pd
import io
import base64

st.set_page_config(page_title="–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –≥–æ—Å–Ω–æ–º–µ—Ä–æ–≤", page_icon="üöó")

st.write("""
# –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ—Å. –Ω–æ–º–µ—Ä–æ–≤ –∞–≤—Ç–æ
## –§—É–Ω–∫—Ü–∏–∏:
1. –ó–∞–º–µ–Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É (–£‚ÜíY, –ö‚ÜíK, –ï‚ÜíE –∏ —Ç.–¥.)
2. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—à–Ω–∏—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–ø—Ä–æ–±–µ–ª—ã, –¥–µ—Ñ–∏—Å—ã –∏ –¥—Ä.)
3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä

–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ - –æ–¥–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Å –≥–æ—Å–Ω–æ–º–µ—Ä–∞–º–∏.
""")

def change_letters(reg_number):
    """ 
    –ü–æ–º–µ–Ω—è—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –≤ –≥–æ—Å. –Ω–æ–º–µ—Ä–µ –∞–≤—Ç–æ –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É –∏ 
    —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä 
    """
    if not isinstance(reg_number, str):
        reg_number = str(reg_number)
        
    replace_dict = {'–£': 'Y', '–ö': 'K', '–ï': 'E', '–ù': 'H', '–•': 'X', '–í': 'B',
                    '–ê': 'A', '–†': 'P', '–û': 'O', '–°': 'C', '–ú': 'M', '–¢': 'T'}
    
    # –°–Ω–∞—á–∞–ª–∞ –∑–∞–º–µ–Ω—è–µ–º –∫–∏—Ä–∏–ª–ª–∏—Ü—É –Ω–∞ –ª–∞—Ç–∏–Ω–∏—Ü—É
    converted = ''.join(replace_dict.get(char, char) for char in reg_number)
    
    # –ó–∞—Ç–µ–º —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–∏–º–≤–æ–ª—ã –∫—Ä–æ–º–µ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤ –∏ —Ü–∏—Ñ—Ä
    cleaned = ''.join(char for char in converted if char.isdigit() or 
                     (char.upper() >= 'A' and char.upper() <= 'Z'))
    
    return cleaned

# Add a file uploader widget
uploaded_file = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –≥–æ—Å–Ω–æ–º–µ—Ä–∞–º–∏", 
    type=["xlsx"],
    key="file_uploader_1",
    help="–§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ–¥–Ω—É –∫–æ–ª–æ–Ω–∫—É —Å –≥–æ—Å–Ω–æ–º–µ—Ä–∞–º–∏ –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ"
)

# –î–æ–±–∞–≤–ª—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
st.write("### –ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é")
text_input = st.text_area(
    "–í–≤–µ–¥–∏—Ç–µ –≥–æ—Å–Ω–æ–º–µ—Ä–∞ (–æ–¥–∏–Ω –Ω–æ–º–µ—Ä –Ω–∞ —Å—Ç—Ä–æ–∫—É)",
    height=200,
    key="manual_input"
)

if uploaded_file is not None:
    try:
        # Display file details for debugging
        file_details = {
            "Filename": uploaded_file.name,
            "File size": f"{uploaded_file.size / 1024:.2f} KB",
            "File type": uploaded_file.type
        }
        st.write("### –î–µ—Ç–∞–ª–∏ —Ñ–∞–π–ª–∞:")
        for key, value in file_details.items():
            st.write(f"- {key}: {value}")
        
        # Read excel file with minimal options
        df = pd.read_excel(uploaded_file, header=None, engine='openpyxl')
        
        # Convert first column to string and apply transformation
        df[0] = df[0].astype(str).apply(change_letters)
        
        # Generate download link
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, header=False)
        
        output.seek(0)
        excel_data = output.read()
        
        # Create a download link using HTML
        b64 = base64.b64encode(excel_data).decode()
        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="converted_numbers.xlsx">üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª</a>'
        st.markdown(href, unsafe_allow_html=True)
        
        # Also show the first few rows
        st.write("### –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
        st.dataframe(df.head(10))
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")
        st.exception(e)
        
# Process manually entered text if any
elif text_input:
    try:
        # Split input into lines and process
        lines = text_input.strip().split('\n')
        processed_lines = [change_letters(line) for line in lines]
        
        # Create dataframe
        df = pd.DataFrame(processed_lines)
        
        # Display results
        st.write("### –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
        results_df = pd.DataFrame({'–û—Ä–∏–≥–∏–Ω–∞–ª': lines, '–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ': processed_lines})
        st.dataframe(results_df)
        
        # Generate download for manual input
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, index=False, header=False)
        
        output.seek(0)
        excel_data = output.read()
        
        # Create download link
        b64 = base64.b64encode(excel_data).decode()
        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="manual_converted.xlsx">üì• –°–∫–∞—á–∞—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–π–ª</a>'
        st.markdown(href, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞: {str(e)}")
        st.exception(e)

# Add instructions
st.write("""
### –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª Excel —Å –≥–æ—Å–Ω–æ–º–µ—Ä–∞–º–∏ –ò–õ–ò –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –≤—Ä—É—á–Ω—É—é
2. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω–∏—Ç –∫–∏—Ä–∏–ª–ª–∏—á–µ—Å–∫–∏–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ –ª–∞—Ç–∏–Ω—Å–∫–∏–µ –∏ —É–¥–∞–ª–∏—Ç –≤—Å–µ –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
3. –°–∫–∞—á–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–∞–∂–∞–≤ –Ω–∞ —Å—Å—ã–ª–∫—É

### –ü—Ä–∏–º–µ—Ä—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:
| –ò—Å—Ö–æ–¥–Ω—ã–π –Ω–æ–º–µ—Ä | –ü–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ |
|----------------|-------------------|
| –ê123–í–°45      | A123BC45         |
| –£ 777 –ö–• 77   | Y777KX77         |
| –û-198-–ï–ù-152  | O198EH152        |
| –ê–† 1576 –ú–¢    | AP1576MT         |
""")

# Add debugging information
st.write("### –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:")
st.write(f"- –í–µ—Ä—Å–∏—è Streamlit: {st.__version__}")
st.write(f"- –í–µ—Ä—Å–∏—è Pandas: {pd.__version__}")
